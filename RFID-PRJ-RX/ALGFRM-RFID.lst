CCS PCH C Compiler, Version 4.135, 3758               05-Aðu-15 12:52

               Filename: C:\Users\SCANAN\Desktop\HOBÝ\!!!!!!!!!!!!!!!!!!!!!!!!ALGIFARM\ALGIFARM PRJ\RFID-PRJ-RX\ALGFRM-RFID.lst

               ROM used: 2060 bytes (25%)
                         Largest free fragment is 4884
               RAM used: 112 (15%) at main() level
                         133 (17%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   0632
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0108
0060:  BTFSS  FF0.4
0062:  GOTO   006C
0066:  BTFSC  FF0.1
0068:  GOTO   0140
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   00DE
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... //RX 
.................... //============================================================================== 
....................  
.................... //============================================================================== 
....................  
.................... #include <ALGFRM-RFID.h> 
.................... #include <18F6310.h> 
.................... //////// Standard Header file for the PIC18F6310 device //////////////// 
.................... #device PIC18F6310 
.................... #list 
....................  
.................... #device adc=8 
.................... #FUSES WDT64                     
.................... #FUSES INTRC_IO                  //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOBROWNOUT                //Reset when brownout detected 
.................... #FUSES PUT                       //No Power Up Timer 
.................... #FUSES NOSTVREN                  //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOIESO                    //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                   //Fail-safe clock monitor enabled 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PROTECT                   //Code not protected from reading 
.................... #FUSES NOLPT1OSC                 //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                    //Master Clear pin disabled                   
....................  
.................... #use delay(clock=32000000) 
*
0238:  CLRF   FEA
023A:  MOVLW  7F
023C:  MOVWF  FE9
023E:  MOVF   FEF,W
0240:  BZ    025C
0242:  MOVLW  0A
0244:  MOVWF  01
0246:  CLRF   00
0248:  DECFSZ 00,F
024A:  BRA    0248
024C:  DECFSZ 01,F
024E:  BRA    0246
0250:  MOVLW  5F
0252:  MOVWF  00
0254:  DECFSZ 00,F
0256:  BRA    0254
0258:  DECFSZ FEF,F
025A:  BRA    0242
025C:  RETURN 0
*
047E:  MOVLW  02
0480:  SUBWF  x6F,F
0482:  BNC   049A
0484:  CLRF   FEA
0486:  MOVLW  6F
0488:  MOVWF  FE9
048A:  MOVF   FEF,W
048C:  BZ    049A
048E:  BRA    0496
0490:  BRA    0492
0492:  BRA    0494
0494:  NOP   
0496:  DECFSZ FEF,F
0498:  BRA    0490
049A:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8, ERRORS) 
*
00C6:  BTFSS  F9E.5
00C8:  BRA    00C6
00CA:  MOVFF  FAB,19
00CE:  MOVFF  FAE,01
00D2:  BTFSS  19.1
00D4:  BRA    00DA
00D6:  BCF    FAB.4
00D8:  BSF    FAB.4
00DA:  GOTO   00E0 (RETURN)
.................... #use i2c(Master,Fast=400000,sda=PIN_F3,scl=PIN_F2,force_sw) 
*
025E:  MOVLW  08
0260:  MOVWF  01
0262:  BRA    0264
0264:  BCF    F8E.2
0266:  BCF    F97.2
0268:  BRA    026A
026A:  NOP   
026C:  RLCF   x76,F
026E:  BCF    F8E.3
0270:  BTFSC  FD8.0
0272:  BSF    F97.3
0274:  BTFSS  FD8.0
0276:  BCF    F97.3
0278:  BSF    F97.2
027A:  BTFSS  F85.2
027C:  BRA    027A
027E:  DECFSZ 01,F
0280:  BRA    0262
0282:  BRA    0284
0284:  BCF    F8E.2
0286:  BCF    F97.2
0288:  NOP   
028A:  BSF    F97.3
028C:  BRA    028E
028E:  NOP   
0290:  BRA    0292
0292:  NOP   
0294:  BSF    F97.2
0296:  BTFSS  F85.2
0298:  BRA    0296
029A:  CLRF   01
029C:  BRA    029E
029E:  NOP   
02A0:  BTFSC  F85.3
02A2:  BSF    01.0
02A4:  BCF    F8E.2
02A6:  BCF    F97.2
02A8:  BCF    F8E.3
02AA:  BCF    F97.3
02AC:  RETURN 0
....................  
.................... struct IOpins { 
....................            BOOLEAN five;       //A0  0           
....................            BOOLEAN six;        //A1  0             
....................            BOOLEAN CD_2;       //A2  0 
....................            BOOLEAN antled2;    //A3  0 
....................            BOOLEAN antled1;    //A4  0 
....................            BOOLEAN E1;         //A5  0 
....................            BOOLEAN F1;         //A6  0 
....................            BOOLEAN unused1;    //A7  0 
....................            BOOLEAN moduleCLK;     //B0  0 
....................            BOOLEAN three;      //B1  0         
....................            BOOLEAN moduleDR1;      //B2  1     
....................            BOOLEAN four;       //B3  0  
....................            BOOLEAN AB_2;       //B4  0 
....................            BOOLEAN tandem;     //B5  0 
....................            BOOLEAN comLED;     //B6  0 
....................            BOOLEAN moduleCTX;        //B7  0   
....................            BOOLEAN cpuLED;     //C0  0 
....................            BOOLEAN moduleDATA;     //C1  0 
....................            BOOLEAN moduleCS;       //C2  0  
....................            BOOLEAN moduleCE;       //C3  0 
....................            BOOLEAN modulePWRUP;    //C4  0 
....................            BOOLEAN moduleCPS;        //C5  0    
....................            BOOLEAN rs232Tx;    //C6  0 
....................            BOOLEAN rs232Rx;    //C7  1 
....................            BOOLEAN down1;      //D0  0 
....................            BOOLEAN up1;        //D1  0 
....................            BOOLEAN right1;     //D2  0 
....................            BOOLEAN left1;      //D3  0 
....................            BOOLEAN two;        //D4  0 
....................            BOOLEAN one;        //D5  0 
....................            BOOLEAN down2;      //D6  0 
....................            BOOLEAN up2;        //D7  0   
....................            BOOLEAN antennaselect;   //E0  0       
....................            BOOLEAN LR_2;            //E1  0        
....................            BOOLEAN safetyfeedback2; //E2  0  
....................            BOOLEAN NS_2;            //E3  0 
....................            BOOLEAN safetyfeedback1; //E4  0 
....................            BOOLEAN errorLED;        //E5  0 
....................            BOOLEAN runrelay;        //E6  0 
....................            BOOLEAN horn;            //E7  0   
....................            BOOLEAN buzzer;        //F0  0       
....................            BOOLEAN AUXrelay;            //F1  0        
....................            BOOLEAN e2promSCL;       //F2  0  
....................            BOOLEAN e2promSDA;       //F3  1 
....................            BOOLEAN iKeystatus;      //F4  1 
....................            BOOLEAN EF_2;            //F5  0 
....................            BOOLEAN teachbutton;     //F6  0 
....................            BOOLEAN modulepower;     //F7  
....................            BOOLEAN emergencyLED;    //G0  0     
....................            BOOLEAN SW01      ;      //G1  0     
....................            BOOLEAN start2;          //G2  0  
....................            BOOLEAN start1;          //G3  0                      
....................            BOOLEAN ecomidselect;    //G4  0   
....................            //BOOLEAN unused1;       //G5 
....................            //BOOLEAN unused2;       //G6 
....................            //BOOLEAN unused3;       //G7 
.................... } IOpin; 
.................... #byte IOpin=0xF80 
....................  
.................... union { 
....................          unsigned int8 buffer[4]; 
....................          struct { 
....................                   int1 up1; 
....................                   int1 down1;                
....................                   int1 left1;         
....................                   int1 right1;                          
....................                   int1 up2; 
....................                   int1 down2;  
....................                   int1 LR_2; 
....................                   int1 unused0; 
....................                   int1 one; 
....................                   int1 two;                
....................                   int1 three;         
....................                   int1 four;                          
....................                   int1 five; 
....................                   int1 six;  
....................                   int1 seven; 
....................                   int1 eight; 
....................                   int1 p1; 
....................                   int1 p2; 
....................                   int1 p3;        
....................                   int1 p4; 
....................                   int1 p5; 
....................                   int1 p6; 
....................                   int1 p7; 
....................                   int1 p8; 
....................                   int1 SW01;  
....................                   int1 SW02;  
....................                   int1 AUX1;  
....................                   int1 unused1;  
....................                   int1 unused2;  
....................                   int1 horn;  
....................                   int1 unused3;  
....................                   int1 buttonpressed; 
....................          }bit; 
.................... } data; 
....................  
.................... struct timer { 
....................                  unsigned int16 count; 
....................                  unsigned int16 setvalue; 
....................                  unsigned int16 time; 
....................                  unsigned int16 timesetvalue; 
....................                  unsigned int8 setONvalue; 
....................                  unsigned int8 setOFFvalue; 
....................                  int1 overflow; 
....................                  int1 timeoverflow; 
....................                  int1 enable; 
....................                  int1 toggle; 
....................              }; 
....................               
.................... #define ADDRESSSIZE 3 
.................... #define PAYLOADSIZE 16            
.................... unsigned char channel; 
.................... unsigned char idH,idL,chXORcod; 
.................... unsigned char RFIDmsg[17]; 
.................... short msgrdy,txmode=1; 
.................... //unsigned char databit; 
.................... //#bit tempdatabit=databit.7 
.................... unsigned char TXBuffer[PAYLOADSIZE]; 
.................... unsigned char RXBuffer[PAYLOADSIZE]; 
.................... unsigned char nrfaddress[ADDRESSSIZE]; 
.................... unsigned int8 config_setup[14]; 
.................... //unsigned int16 emgcounter=0,signalledcounter=0,sleepcounter=0; 
.................... //char ShiftReg; 
.................... //#bit ShiftRegLSB=ShiftReg.0 
.................... //#byte RCREG = 0x1A //6310 da dresse bak 
.................... unsigned int16 cpucounter; 
.................... //unsigned char sec; 
....................  
....................  
.................... #include <ALGFRM-i2c_Flex_LCD.c> 
....................  
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.0  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD dispay  
.................... //     \1 Set write position on LCD Line 1  
.................... //     \2 Set write position on LCD Line 2  
.................... //     \3 Set write position on LCD Line 3  
.................... //     \4 Set write position on LCD Line 4  
.................... //  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with  
.................... //              an EXPANDER of I/O with connection I2C. The tests of these  
.................... //              routines have been programmed using the IC PCF8574T of Phillips.  
.................... //              I used 4 bits mode programming. The 8 bits mode programming  
.................... //              is possible if you use 2 x PCF8574T.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
....................  
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module  
....................  
.................... #define ON             1  
.................... #define OFF            0  
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1  
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2  
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3  
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4  
....................    
.................... byte address;  
.................... int1 lcd_backlight=ON;  
....................  
.................... void i2c_send_nibble(unsigned char data)  
....................    {     
....................         i2c_start();  
02AE:  BSF    F97.3
02B0:  BRA    02B2
02B2:  BSF    F97.2
02B4:  BRA    02B6
02B6:  NOP   
02B8:  BCF    F8E.3
02BA:  BCF    F97.3
02BC:  BRA    02BE
02BE:  BCF    F8E.2
02C0:  BCF    F97.2
....................         delay_us(20);  
02C2:  MOVLW  35
02C4:  MOVWF  00
02C6:  DECFSZ 00,F
02C8:  BRA    02C6
....................         i2c_write(LCD_ADDR); //the slave addresse  
02CA:  MOVLW  4E
02CC:  MOVWF  x76
02CE:  RCALL  025E
....................         delay_us(20);  
02D0:  MOVLW  35
02D2:  MOVWF  00
02D4:  DECFSZ 00,F
02D6:  BRA    02D4
....................         i2c_write(data);  
02D8:  MOVFF  75,76
02DC:  RCALL  025E
....................         delay_us(20);  
02DE:  MOVLW  35
02E0:  MOVWF  00
02E2:  DECFSZ 00,F
02E4:  BRA    02E2
....................         i2c_stop();  
02E6:  BCF    F97.3
02E8:  NOP   
02EA:  BSF    F97.2
02EC:  BTFSS  F85.2
02EE:  BRA    02EC
02F0:  BRA    02F2
02F2:  BRA    02F4
02F4:  NOP   
02F6:  BSF    F97.3
02F8:  BRA    02FA
....................         delay_us(20);  
02FA:  MOVLW  35
02FC:  MOVWF  00
02FE:  DECFSZ 00,F
0300:  BRA    02FE
....................    }  
0302:  RETURN 0
....................  
.................... void lcd_send_byte(unsigned char data)  
....................    {  
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN  
0304:  BTFSS  33.2
0306:  BRA    0312
0308:  MOVF   x74,W
030A:  IORLW  04
030C:  IORLW  08
030E:  MOVWF  x74
0310:  BRA    0314
0312:  BSF    x74.2
....................         i2c_send_nibble(data);  
0314:  MOVFF  74,75
0318:  RCALL  02AE
....................         data=data-4;       //toggle EN back to 0  
031A:  MOVLW  04
031C:  SUBWF  x74,F
....................         i2c_send_nibble(data);  
031E:  MOVFF  74,75
0322:  RCALL  02AE
....................    }  
0324:  RETURN 0
....................      
.................... void lcd_clear()  
.................... {  
....................     lcd_send_byte(0x00);  
0326:  CLRF   x74
0328:  RCALL  0304
....................     lcd_send_byte(0x10);  
032A:  MOVLW  10
032C:  MOVWF  x74
032E:  RCALL  0304
....................     delay_ms(2);  
0330:  MOVLW  02
0332:  MOVWF  x7F
0334:  RCALL  0238
.................... }  
0336:  RETURN 0
....................  
.................... void lcd_init()  
.................... {  
....................     delay_ms(200); //LCD power up delay  
0338:  MOVLW  C8
033A:  MOVWF  x7F
033C:  RCALL  0238
....................          
....................    //Request works on the command by set the RS = 0 R/W = 0 write  
....................         lcd_send_byte(0x00);  
033E:  CLRF   x74
0340:  RCALL  0304
....................         lcd_send_byte(0x10);  
0342:  MOVLW  10
0344:  MOVWF  x74
0346:  RCALL  0304
....................         lcd_send_byte(0x00);  
0348:  CLRF   x74
034A:  RCALL  0304
....................         lcd_send_byte(0x00);  
034C:  CLRF   x74
034E:  RCALL  0304
....................         lcd_send_byte(0x10);  
0350:  MOVLW  10
0352:  MOVWF  x74
0354:  RCALL  0304
....................            //First state in 8 bit mode  
....................         lcd_send_byte(0x30);  
0356:  MOVLW  30
0358:  MOVWF  x74
035A:  RCALL  0304
....................         lcd_send_byte(0x30);  
035C:  MOVLW  30
035E:  MOVWF  x74
0360:  RCALL  0304
....................            //Then set to 4-bit mode  
....................         lcd_send_byte(0x30);  
0362:  MOVLW  30
0364:  MOVWF  x74
0366:  RCALL  0304
....................         lcd_send_byte(0x20);  
0368:  MOVLW  20
036A:  MOVWF  x74
036C:  RCALL  0304
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h)  
....................         lcd_send_byte(0x20);  
036E:  MOVLW  20
0370:  MOVWF  x74
0372:  RCALL  0304
....................         lcd_send_byte(0x80);  
0374:  MOVLW  80
0376:  MOVWF  x74
0378:  RCALL  0304
....................            //no need cursor on (0Ch)  
....................         lcd_send_byte(0x00);  
037A:  CLRF   x74
037C:  RCALL  0304
....................         lcd_send_byte(0xC0);  
037E:  MOVLW  C0
0380:  MOVWF  x74
0382:  RCALL  0304
....................            //the cursor moves to the left (06 h)  
....................         lcd_send_byte(0x00);  
0384:  CLRF   x74
0386:  RCALL  0304
....................         lcd_send_byte(0x60);  
0388:  MOVLW  60
038A:  MOVWF  x74
038C:  RCALL  0304
....................            //clears the display  
....................         lcd_clear();  
038E:  RCALL  0326
.................... }  
0390:  GOTO   069C (RETURN)
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {       
.................... static char data;  
....................        
....................    switch(y)  
....................    {  
0394:  MOVF   x73,W
0396:  XORLW  01
0398:  BZ    03A8
039A:  XORLW  03
039C:  BZ    03AE
039E:  XORLW  01
03A0:  BZ    03B4
03A2:  XORLW  07
03A4:  BZ    03BA
03A6:  BRA    03C0
....................       case 1:  address= lcd_line_one;     break;  
03A8:  MOVLW  80
03AA:  MOVWF  x67
03AC:  BRA    03C6
....................       case 2:  address= lcd_line_two;     break;  
03AE:  MOVLW  C0
03B0:  MOVWF  x67
03B2:  BRA    03C6
....................       case 3:  address= lcd_line_three;   break;  
03B4:  MOVLW  94
03B6:  MOVWF  x67
03B8:  BRA    03C6
....................       case 4:  address= lcd_line_four;    break;  
03BA:  MOVLW  D4
03BC:  MOVWF  x67
03BE:  BRA    03C6
....................       default: address= lcd_line_one;     break;   
03C0:  MOVLW  80
03C2:  MOVWF  x67
03C4:  BRA    03C6
....................    }  
....................    
....................    address+=x-1;  
03C6:  MOVLW  01
03C8:  SUBWF  x72,W
03CA:  ADDWF  x67,F
....................    data=address&0xF0;  
03CC:  MOVF   x67,W
03CE:  ANDLW  F0
03D0:  MOVWF  x68
....................    lcd_send_byte(data);  
03D2:  MOVFF  68,74
03D6:  RCALL  0304
....................    data=address&0x0F;  
03D8:  MOVF   x67,W
03DA:  ANDLW  0F
03DC:  MOVWF  x68
....................    data=data<<4;  
03DE:  SWAPF  x68,F
03E0:  MOVLW  F0
03E2:  ANDWF  x68,F
....................    lcd_send_byte(data);  
03E4:  MOVFF  68,74
03E8:  RCALL  0304
.................... }  
03EA:  RETURN 0
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {  
....................  char data;       
....................   switch(in_data)  
....................    {   
03EC:  MOVF   x70,W
03EE:  XORLW  0C
03F0:  BZ    0404
03F2:  XORLW  0D
03F4:  BZ    0408
03F6:  XORLW  03
03F8:  BZ    0412
03FA:  XORLW  01
03FC:  BZ    041E
03FE:  XORLW  07
0400:  BZ    042A
0402:  BRA    0436
....................      case '\f': lcd_clear()    ;  break;                 
0404:  RCALL  0326
0406:  BRA    045A
....................      case '\1': lcd_gotoxy(1,1);  break;  
0408:  MOVLW  01
040A:  MOVWF  x72
040C:  MOVWF  x73
040E:  RCALL  0394
0410:  BRA    045A
....................      case '\2': lcd_gotoxy(1,2);  break;  
0412:  MOVLW  01
0414:  MOVWF  x72
0416:  MOVLW  02
0418:  MOVWF  x73
041A:  RCALL  0394
041C:  BRA    045A
....................      case '\3': lcd_gotoxy(1,3);  break;  
041E:  MOVLW  01
0420:  MOVWF  x72
0422:  MOVLW  03
0424:  MOVWF  x73
0426:  RCALL  0394
0428:  BRA    045A
....................      case '\4': lcd_gotoxy(1,4);  break;  
042A:  MOVLW  01
042C:  MOVWF  x72
042E:  MOVLW  04
0430:  MOVWF  x73
0432:  RCALL  0394
0434:  BRA    045A
....................  
....................      default:  
....................         data=in_data&0xF0;  
0436:  MOVF   x70,W
0438:  ANDLW  F0
043A:  MOVWF  x71
....................         data=data|RS; //set RS pin to 1  
043C:  BSF    x71.0
....................         lcd_send_byte(data);  
043E:  MOVFF  71,74
0442:  RCALL  0304
....................         data=in_data&0x0F;  
0444:  MOVF   x70,W
0446:  ANDLW  0F
0448:  MOVWF  x71
....................         data=data<<4;  
044A:  SWAPF  x71,F
044C:  MOVLW  F0
044E:  ANDWF  x71,F
....................         data=data|RS; //set RS pin to 1  
0450:  BSF    x71.0
....................         lcd_send_byte(data);  
0452:  MOVFF  71,74
0456:  RCALL  0304
....................      break;  
0458:  BRA    045A
....................    }  
.................... }  
045A:  RETURN 0
....................  
.................... //#include <ALGFRM-DS3231.c> 
.................... #include <ALGFRM-nrf2401.c> 
.................... /******************************************************************************/ 
.................... void init_nrf24(void) 
.................... { 
.................... unsigned int i, j, temp; 
.................... unsigned int config_setup[14]; 
.................... IOpin.modulepower=0; 
*
049C:  BCF    F85.7
.................... delay_ms(10); 
049E:  MOVLW  0A
04A0:  MOVWF  x7F
04A2:  RCALL  0238
.................... #bit tempbit=temp.7 
....................  
.................... //RXDATA pinini çýkýþ olarak tanýmla 
.................... set_tris_c (0x80);   
04A4:  MOVLW  80
04A6:  MOVWF  F94
.................... //portCpin.RXPWRUP=1; 
.................... //delay_ms(3); 
.................... IOpin.moduleCE=0; 
04A8:  BCF    F82.3
.................... IOpin.moduleCS=1; 
04AA:  BSF    F82.2
....................     
....................     // nrf24 konfigürasyon dizisinin kurulmasý 
....................     //=================================================================== 
....................     //111-104 data bitleri 1 hatta en fazla CRC ve adres hariç 232 bittir 
....................     config_setup[0] = PAYLOADSIZE*8; 
04AC:  MOVWF  x71
....................  
....................     // nrf24 çipte baðýmsýz 2 adet alýcý kanal vardýr 
....................     //103-64  data bitleri  Alýcý 2. kanal adresi 
....................     config_setup[1] = 0; 
04AE:  CLRF   x72
....................     config_setup[2] = 0; 
04B0:  CLRF   x73
....................     config_setup[3] = 0; 
04B2:  CLRF   x74
....................     config_setup[4] = 0; 
04B4:  CLRF   x75
....................     config_setup[5] = 0;  
04B6:  CLRF   x76
....................  
....................     //nrf 63-24   data bitleri Alýcý 1. kanal adresi  
....................     config_setup[6] = 0; 
04B8:  CLRF   x77
....................     config_setup[7] = 0; 
04BA:  CLRF   x78
....................  
....................     config_setup[8] = idH; 
04BC:  MOVFF  1F,79
....................     config_setup[9] = chXORcod; // 1. kanal hat adresi 
04C0:  MOVFF  21,7A
....................     config_setup[10]= idL;     // 1. kanal hat adresi 
04C4:  MOVFF  20,7B
....................      
....................   //****************************************************************************   
....................   //*Data bits(23:16) Address width and CRC 
....................      
....................     config_setup[11] = 0b01100011; //0b011000=24 bit adres(COD), 0b11 CRC 16 bit CRC enable 0x63 
04C8:  MOVLW  63
04CA:  MOVWF  x7C
....................    
....................    
....................   //**************************************************************************** 
....................   //*nrf Data bits(15:8)          **config_setup[12] *************************** 
....................   //*bit:15                       **bit7=0 one rcv channel,bit7=1 2 rcv channel 
....................   //*bit:14                       **bit6=0 Direct Mode, bit6=1 ShockBurst Mode 
....................   //*bit:13                       **bit5=0 256 Kps, bit5=1 1Mps 
....................    
....................   //*bit:12 bit:11 bit:10 XTAL Mhz**bit4 bit3 bit2 
....................   //*   0      0      0     4     ** 
....................   //*   0      0      1     8     ** 
....................   //*   0      1      0    12     ** 
....................   //*   0      1      1    16     ** 
....................   //*   0      0      0    20     ** 
....................   //**************************************************************************** 
....................    
....................   //*bit:9 bit:8  RF Power dBm    **bit1 bit0 
....................   //*   0     0     -20           ** 
....................   //*   0     1     -10           ** 
....................   //*   1     0      -5           ** 
....................   //*   1     1       0           ** 
....................   // 0b01001111  0x4F 250kps  0b011011110x6F 1Mps 
....................   config_setup[12]=0x4F; 
04CC:  MOVLW  4F
04CE:  MOVWF  x7D
....................   //**************************************************************************** 
....................    
....................   //****************************************************************************   
....................   //*nrf Data bits(7:0) 
....................   //*bit(7:1) Channel Number 
....................   //*bit0=0 Transmit Mode, bit0=1 Receive Mode   
....................   // kanal nosunu ata ve nrf yi alýcý moduna getir alýcý modu için Bit0=1 olmalý 
....................   if(txmode) 
04D0:  BTFSS  33.1
04D2:  BRA    04DC
....................   { 
....................    config_setup[13] = channel<<1; 
04D4:  BCF    FD8.0
04D6:  RLCF   1E,W
04D8:  MOVWF  x7E
....................   } 
....................   else 
04DA:  BRA    04E4
....................   { 
....................    config_setup[13] = (channel<<1) | 0x01; 
04DC:  BCF    FD8.0
04DE:  RLCF   1E,W
04E0:  IORLW  01
04E2:  MOVWF  x7E
....................   } 
....................   //**************************************************************************** 
....................    
....................   // nrf24 konfigurasyon verilerini yükle 
....................     for(i = 0 ; i < 14 ; i++) 
04E4:  CLRF   x6E
04E6:  MOVF   x6E,W
04E8:  SUBLW  0D
04EA:  BNC   0522
....................     { 
....................         temp = config_setup[i]; 
04EC:  CLRF   03
04EE:  MOVF   x6E,W
04F0:  ADDLW  71
04F2:  MOVWF  FE9
04F4:  MOVLW  00
04F6:  ADDWFC 03,W
04F8:  MOVWF  FEA
04FA:  MOVFF  FEF,70
....................          
....................         for(j = 0 ; j < 8 ; j++) 
04FE:  CLRF   x6F
0500:  MOVF   x6F,W
0502:  SUBLW  07
0504:  BNC   051E
....................         {    
....................             IOpin.moduleDATA=tempbit; 
0506:  BTFSS  x70.7
0508:  BCF    F82.1
050A:  BTFSC  x70.7
050C:  BSF    F82.1
....................             IOpin.moduleCLK=1; 
050E:  BSF    F81.0
....................             IOpin.moduleCLK=1; 
0510:  BSF    F81.0
....................             IOpin.moduleCLK=0; 
0512:  BCF    F81.0
....................             IOpin.moduleCLK=0; 
0514:  BCF    F81.0
....................          
....................             temp <<= 1; 
0516:  BCF    FD8.0
0518:  RLCF   x70,F
....................         } 
051A:  INCF   x6F,F
051C:  BRA    0500
....................     } 
051E:  INCF   x6E,F
0520:  BRA    04E6
....................      
....................     //Konfigurasyon ayarlarý CS nin düþen kenarýnda aktif hale gelir 
....................     IOpin.moduleCE=0; 
0522:  BCF    F82.3
....................     IOpin.moduleCS=0; 
0524:  BCF    F82.2
....................   
....................     if(!txmode) 
0526:  BTFSC  33.1
0528:  BRA    0532
....................     { 
....................     //Alýcýnýn Konfigürasyon ayarlarýndan sonra RX_DATA giriþ olarak tanýmla 
....................     set_tris_c (0x82);  
052A:  MOVLW  82
052C:  MOVWF  F94
....................     //Havayý dinlemeye baþla 
....................     IOpin.moduleCE=1; 
052E:  BSF    F82.3
....................     IOpin.moduleCS=0; 
0530:  BCF    F82.2
....................     } 
....................      
.................... } 
0532:  GOTO   073E (RETURN)
.................... //****************************************************************************** 
....................  
....................  
....................  
.................... #zero_ram 
.................... #fill_rom 0x00 
....................  
.................... #use fast_io(A) 
.................... #use fast_io(B) 
.................... #use fast_io(C)                        
.................... #use fast_io(D) 
.................... #use fast_io(E)                    
.................... #use fast_io(F)              
.................... #use fast_io(G) 
....................  
.................... //void clear_usart_receiver(); 
.................... /*                            
.................... unsigned char s = 00;                     
.................... unsigned char min =26;               
.................... unsigned char hr = 9;     
.................... unsigned char dy = 2;     
.................... unsigned char dt = 8;               
.................... unsigned char mt = 07;                     
.................... unsigned char yr = 15; 
.................... short hr_format = _24_hour_format;  
.................... short am_pm = 1;                                                       
.................... */ 
.................... //============================================================================== 
....................  
.................... #org 0x1B02,0x1FFF 
.................... void set_CHID(void) 
.................... { 
....................    channel=0x50;  
*
1B02:  MOVLW  50
1B04:  MOVWF  1E
....................    idH=0xAA;//43605 
1B06:  MOVLW  AA
1B08:  MOVWF  1F
....................    idL=0x55; 
1B0A:  MOVLW  55
1B0C:  MOVWF  20
....................  
.................... chXORcod=(idH^idL)^channel; 
1B0E:  MOVF   1F,W
1B10:  XORWF  20,W
1B12:  XORWF  1E,W
1B14:  MOVWF  21
.................... nrfaddress[0]=idH; 
1B16:  MOVFF  1F,54
.................... nrfaddress[1]=chXORcod; 
1B1A:  MOVFF  21,55
.................... nrfaddress[2]=idL; 
1B1E:  MOVFF  20,56
....................  
.................... } 
1B22:  RETURN 0
.................... //============================================================================== 
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... static char data,cc=0; 
....................  
.................... data=getc(); 
*
00DE:  BRA    00C6
00E0:  MOVFF  01,69
....................  
.................... RFIDmsg[cc]=data; 
00E4:  CLRF   03
00E6:  MOVF   x6A,W
00E8:  ADDLW  22
00EA:  MOVWF  FE9
00EC:  MOVLW  00
00EE:  ADDWFC 03,W
00F0:  MOVWF  FEA
00F2:  MOVFF  69,FEF
.................... cc++; 
00F6:  INCF   x6A,F
....................  if(data==0x0D) 
00F8:  MOVF   x69,W
00FA:  SUBLW  0D
00FC:  BNZ   0102
....................  { 
....................     cc=0; 
00FE:  CLRF   x6A
....................     msgrdy=1; 
0100:  BSF    33.0
....................  } 
.................... } 
....................  
....................  
0102:  BCF    F9E.5
0104:  GOTO   0078
.................... #int_TIMER0 
.................... void  TIMER0_isr(void) 
.................... { 
.................... cpucounter++; 
0108:  INCF   x65,F
010A:  BTFSC  FD8.2
010C:  INCF   x66,F
.................... if(cpucounter<100) 
010E:  MOVF   x66,F
0110:  BNZ   011C
0112:  MOVF   x65,W
0114:  SUBLW  63
0116:  BNC   011C
.................... IOpin.cpuLED=1; 
0118:  BSF    F82.0
.................... else 
011A:  BRA    011E
.................... IOpin.cpuLED=0; 
011C:  BCF    F82.0
.................... if(cpucounter>=1000) 
011E:  MOVF   x66,W
0120:  SUBLW  02
0122:  BC    0132
0124:  XORLW  FF
0126:  BNZ   012E
0128:  MOVF   x65,W
012A:  SUBLW  E7
012C:  BC    0132
.................... cpucounter=0; 
012E:  CLRF   x66
0130:  CLRF   x65
....................  
.................... set_timer0(5); 
0132:  CLRF   FD7
0134:  MOVLW  05
0136:  MOVWF  FD6
.................... clear_interrupt(int_timer0); 
0138:  BCF    FF2.2
.................... } 
....................  
....................  
013A:  BCF    FF2.2
013C:  GOTO   0078
.................... #int_EXT2  
.................... void EXT_isr(void)                                 
.................... {  
.................... unsigned int8 c,d; 
.................... char ShiftReg; 
.................... #bit ShiftRegLSB=ShiftReg.0 
.................... set_tris_c(0x82);// RX modul DATA için giriþ yap 
0140:  MOVLW  82
0142:  MOVWF  F94
.................... IOpin.moduleCLK=0; 
0144:  BCF    F81.0
.................... //resetcounter=0; 
.................... //reinitnrfcounter=0; 
.................... //reinitikeycounter=0; 
....................  
.................... for(d=0;d<PAYLOADSIZE;d++) 
0146:  CLRF   x81
0148:  MOVF   x81,W
014A:  SUBLW  0F
014C:  BNC   0182
.................... { 
....................    for(c=0;c<8;c++) 
014E:  CLRF   x80
0150:  MOVF   x80,W
0152:  SUBLW  07
0154:  BNC   016C
....................    { 
....................       ShiftReg=ShiftReg<<1; 
0156:  BCF    FD8.0
0158:  RLCF   x82,F
....................       ShiftRegLSB=IOpin.moduleDATA; 
015A:  BCF    x82.0
015C:  BTFSC  F82.1
015E:  BSF    x82.0
....................       IOpin.moduleCLK=1; 
0160:  BSF    F81.0
....................       IOpin.moduleCLK=1; 
0162:  BSF    F81.0
....................       IOpin.moduleCLK=0; 
0164:  BCF    F81.0
....................       IOpin.moduleCLK=0; 
0166:  BCF    F81.0
....................    } 
0168:  INCF   x80,F
016A:  BRA    0150
....................  
.................... RXBuffer[d]=ShiftReg; 
016C:  CLRF   03
016E:  MOVF   x81,W
0170:  ADDLW  44
0172:  MOVWF  FE9
0174:  MOVLW  00
0176:  ADDWFC 03,W
0178:  MOVWF  FEA
017A:  MOVFF  82,FEF
.................... } 
017E:  INCF   x81,F
0180:  BRA    0148
....................  
.................... IOpin.comled^=1; 
0182:  CLRF   00
0184:  BTFSC  F81.6
0186:  INCF   00,F
0188:  MOVLW  01
018A:  XORWF  00,F
018C:  BTFSS  00.0
018E:  BCF    F81.6
0190:  BTFSC  00.0
0192:  BSF    F81.6
....................  
.................... //set_CHID(); 
.................... //init_nrf24(); 
.................... //IOpin.antled1^=1; 
.................... //IOpin.antled2=0; 
.................... clear_interrupt(int_ext2); 
0194:  BCF    FF0.1
.................... } 
....................  
.................... //============================================================================== 
.................... /* 
.................... unsigned int16 calculate_crc16(unsigned int16 old_crc, unsigned int8 data) 
.................... {  
.................... unsigned int16 crc16bit; 
.................... unsigned int16 x;  
....................  
.................... x = make8(old_crc,1) ^ data;  //x = ((old_crc>>8) ^ data) & 0xff;  
.................... x ^= x>>4;  
.................... crc16bit = (old_crc << 8) ^ (x << 12) ^ (x <<5) ^ x;  
.................... return crc16bit;  
.................... } 
.................... */ 
....................  
.................... //============================================================================== 
0196:  BCF    FF0.1
0198:  GOTO   0078
.................... void transmit_data(void) 
.................... { 
.................... int8 a,b; 
.................... unsigned char databit; 
.................... #bit tempdatabit=databit.7 
....................  
.................... iopin.modulePWRUP=1; 
....................  
.................... delay_ms(3); 
....................  
.................... IOpin.moduleCE=1;// 
.................... IOpin.moduleCS=0;//RX Aktif nrf24'e veri yüklenebilir 
....................  
.................... delay_us(5); 
....................  
.................... for(a=0;a<ADDRESSSIZE;a++){ 
.................... databit=nrfaddress[a]; 
....................  
....................    for(b=0;b<8;b++) 
....................    { 
....................       IOpin.moduleDATA=tempdatabit; 
....................          IOpin.moduleCLK=1; 
....................          IOpin.moduleCLK=1; 
....................             
....................          IOpin.moduleCLK=0; 
....................          IOpin.moduleCLK=0; 
....................       databit=databit<<1; 
....................    } 
.................... } 
....................  
.................... for(a=0;a<PAYLOADSIZE;a++){ 
.................... databit=TXBuffer[a]; 
....................  
....................    for(b=0;b<8;b++) 
....................    { 
....................       IOpin.moduleDATA=tempdatabit; 
....................       IOpin.moduleCLK=1; 
....................       IOpin.moduleCLK=1; 
....................        
....................       IOpin.moduleCLK=0; 
....................       IOpin.moduleCLK=0; 
....................       databit=databit<<1; 
....................    } 
.................... } 
....................  
.................... IOpin.modulepower=1; //Yükselteciyi aktive et 
.................... delay_us(5); 
.................... IOpin.moduleDATA=0; 
.................... IOpin.moduleCE=0; // Veri iletimine baþla 
.................... delay_us(1000); 
.................... IOpin.modulepower=0;// Yükselticiyi kapat 
.................... IOpin.modulePWRUP=0; 
.................... delay_us(13000); 
.................... } 
....................  
.................... //============================================================================== 
.................... /* 
.................... void show_parameters() 
.................... {  
....................              
.................... }  
.................... */ 
.................... //------------------------------------------------------------------------------ 
.................... void init_prog(void) 
.................... { 
.................... setup_wdt(WDT_OFF); 
*
01AC:  BCF    FD1.0
.................... setup_adc_ports(NO_ANALOGS|VSS_VDD); 
01AE:  MOVF   FC1,W
01B0:  ANDLW  C0
01B2:  IORLW  0F
01B4:  MOVWF  FC1
.................... setup_adc(ADC_OFF); 
01B6:  BCF    FC2.0
.................... setup_psp(PSP_DISABLED);                                                 
01B8:  BCF    FB0.4
.................... setup_spi(SPI_SS_DISABLED); 
01BA:  BCF    FC6.5
01BC:  MOVLW  01
01BE:  MOVWF  FC6
01C0:  MOVLW  00
01C2:  MOVWF  FC7
.................... setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_BIT);// TIMER0 
01C4:  MOVLW  C3
01C6:  MOVWF  FD5
.................... setup_timer_1(T1_DISABLED); 
01C8:  CLRF   FCD
.................... setup_timer_2(T2_DISABLED,0,1); 
01CA:  MOVLW  00
01CC:  MOVWF  FCA
01CE:  MOVLW  00
01D0:  MOVWF  FCB
.................... setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
01D2:  CLRF   FB1
.................... setup_comparator(NC_NC_NC_NC);                                            
01D4:  MOVLW  07
01D6:  MOVWF  FB4
01D8:  MOVF   F97,W
01DA:  MOVWF  F97
01DC:  MOVLW  1A
01DE:  MOVWF  00
01E0:  DECFSZ 00,F
01E2:  BRA    01E0
01E4:  NOP   
01E6:  MOVF   FB4,W
01E8:  BCF    FA1.6
.................... setup_vref(FALSE); 
01EA:  CLRF   FB5
.................... setup_low_volt_detect(FALSE);               
01EC:  CLRF   FD2
.................... setup_oscillator(OSC_32MHZ);                                         
01EE:  MOVLW  70
01F0:  MOVWF  FD3
01F2:  MOVLW  40
01F4:  MOVWF  F9B
01F6:  MOVF   FD3,W
....................  
.................... set_tris_a(0x00); 
01F8:  MOVLW  00
01FA:  MOVWF  F92
.................... set_tris_b(0x24);  
01FC:  MOVLW  24
01FE:  MOVWF  F93
.................... set_tris_c(0x80); 
0200:  MOVLW  80
0202:  MOVWF  F94
.................... set_tris_d(0x00);                                       
0204:  MOVLW  00
0206:  MOVWF  F95
.................... set_tris_e(0x15);      
0208:  MOVLW  15
020A:  MOVWF  F96
.................... set_tris_f(0x58); 
020C:  MOVLW  58
020E:  MOVWF  F97
.................... set_tris_g(0x10); 
0210:  MOVLW  10
0212:  MOVWF  F98
.................... output_a(0x00); 
0214:  CLRF   F89
.................... output_b(0x00); 
0216:  CLRF   F8A
.................... output_c(0x00); 
0218:  CLRF   F8B
.................... output_d(0x00); 
021A:  CLRF   F8C
.................... output_e(0x00); 
021C:  CLRF   F8D
.................... output_f(0x00); 
021E:  CLRF   F8E
.................... output_g(0x00); 
0220:  CLRF   F8F
.................... // RF Modul and PA/LNA activation 
....................    IOpin.modulepower=0; 
0222:  BCF    F85.7
....................    if(txmode) 
0224:  BTFSS  33.1
0226:  BRA    022E
....................    { 
....................    IOpin.moduleCTX=1; 
0228:  BSF    F81.7
....................    IOpin.moduleCPS=0; 
022A:  BCF    F82.5
....................    } 
....................    else 
022C:  BRA    0232
....................    { 
....................    IOpin.moduleCTX=0; 
022E:  BCF    F81.7
....................    IOpin.moduleCPS=1; 
0230:  BSF    F82.5
....................     
....................    } 
....................    IOpin.modulePWRUP=1; 
0232:  BSF    F82.4
....................     
.................... } 
0234:  GOTO   068C (RETURN)
....................  
.................... //------------------------------------------------------------------------------ 
.................... void main(void) 
.................... { 
*
0632:  CLRF   FF8
0634:  BCF    FD0.7
0636:  BSF    07.7
0638:  MOVLW  FE
063A:  MOVWF  00
063C:  MOVLW  03
063E:  MOVWF  01
0640:  MOVLW  02
0642:  MOVWF  FE9
0644:  MOVLW  00
0646:  MOVWF  FEA
0648:  CLRF   FEE
064A:  DECFSZ 00,F
064C:  BRA    0648
064E:  DECFSZ 01,F
0650:  BRA    0648
0652:  CLRF   FEA
0654:  CLRF   FE9
0656:  MOVLW  70
0658:  MOVWF  FD3
065A:  MOVLW  40
065C:  MOVWF  F9B
065E:  MOVF   FD3,W
0660:  CLRF   19
0662:  BSF    F7E.3
0664:  MOVLW  40
0666:  MOVWF  FAF
0668:  MOVLW  03
066A:  MOVWF  F7F
066C:  MOVLW  A6
066E:  MOVWF  FAC
0670:  MOVLW  90
0672:  MOVWF  FAB
0674:  BSF    33.1
0676:  BSF    33.2
0678:  CLRF   x6A
067A:  MOVF   FC1,W
067C:  ANDLW  C0
067E:  IORLW  0F
0680:  MOVWF  FC1
0682:  MOVLW  07
0684:  MOVWF  FB4
0686:  CLRF   x68
....................    unsigned int16 i; 
....................    unsigned char tmpbcd; 
....................    txmode=0; 
0688:  BCF    33.1
....................    init_prog(); 
068A:  BRA    01AC
....................    delay_ms (1000); 
068C:  MOVLW  04
068E:  MOVWF  x6E
0690:  MOVLW  FA
0692:  MOVWF  x7F
0694:  RCALL  0238
0696:  DECFSZ x6E,F
0698:  BRA    0690
....................    lcd_init ();  
069A:  BRA    0338
....................  
.................... EXT_INT_EDGE(2,L_TO_H); 
069C:  BSF    FF1.4
.................... enable_interrupts(INT_EXT2); 
069E:  BSF    FF0.4
.................... enable_interrupts(INT_TIMER0); 
06A0:  BSF    FF2.5
.................... enable_interrupts(INT_RDA); 
06A2:  BSF    F9D.5
....................  
.................... IOpin.buzzer=1; 
06A4:  BSF    F85.0
.................... for(i=0;i<16;i++) 
06A6:  CLRF   x6C
06A8:  CLRF   x6B
06AA:  MOVF   x6C,F
06AC:  BNZ   06DA
06AE:  MOVF   x6B,W
06B0:  SUBLW  0F
06B2:  BNC   06DA
.................... { 
....................    RFIDmsg[i]=' '; 
06B4:  MOVLW  22
06B6:  ADDWF  x6B,W
06B8:  MOVWF  FE9
06BA:  MOVLW  00
06BC:  ADDWFC x6C,W
06BE:  MOVWF  FEA
06C0:  MOVLW  20
06C2:  MOVWF  FEF
....................    RXBuffer[i]=0; 
06C4:  MOVLW  44
06C6:  ADDWF  x6B,W
06C8:  MOVWF  FE9
06CA:  MOVLW  00
06CC:  ADDWFC x6C,W
06CE:  MOVWF  FEA
06D0:  CLRF   FEF
.................... } 
06D2:  INCF   x6B,F
06D4:  BTFSC  FD8.2
06D6:  INCF   x6C,F
06D8:  BRA    06AA
....................    lcd_gotoxy(4,1); 
06DA:  MOVLW  04
06DC:  MOVWF  x72
06DE:  MOVLW  01
06E0:  MOVWF  x73
06E2:  RCALL  0394
....................    printf(lcd_putc,"ELFATEK"); 
06E4:  MOVLW  9C
06E6:  MOVWF  FF6
06E8:  MOVLW  01
06EA:  MOVWF  FF7
06EC:  BRA    045C
....................    for(i=0;i<100;i++) 
06EE:  CLRF   x6C
06F0:  CLRF   x6B
06F2:  MOVF   x6C,F
06F4:  BNZ   0724
06F6:  MOVF   x6B,W
06F8:  SUBLW  63
06FA:  BNC   0724
....................          { 
....................             IOpin.buzzer=0; 
06FC:  BCF    F85.0
....................             delay_us(500); 
06FE:  MOVLW  02
0700:  MOVWF  x6E
0702:  MOVLW  FA
0704:  MOVWF  x6F
0706:  RCALL  047E
0708:  DECFSZ x6E,F
070A:  BRA    0702
....................             IOpin.buzzer=1; 
070C:  BSF    F85.0
....................             delay_us(500); 
070E:  MOVLW  02
0710:  MOVWF  x6E
0712:  MOVLW  FA
0714:  MOVWF  x6F
0716:  RCALL  047E
0718:  DECFSZ x6E,F
071A:  BRA    0712
....................          } 
071C:  INCF   x6B,F
071E:  BTFSC  FD8.2
0720:  INCF   x6C,F
0722:  BRA    06F2
....................    //printf(lcd_putc,"ALGIFarm"); 
....................    delay_ms(1000); 
0724:  MOVLW  04
0726:  MOVWF  x6E
0728:  MOVLW  FA
072A:  MOVWF  x7F
072C:  RCALL  0238
072E:  DECFSZ x6E,F
0730:  BRA    0728
....................    lcd_putc('\f'); 
0732:  MOVLW  0C
0734:  MOVWF  x70
0736:  RCALL  03EC
....................     
....................     
....................    //show_parameters(); 
....................    set_CHID(); 
0738:  CALL   1B02
....................    init_nrf24(); 
073C:  BRA    049C
....................    enable_interrupts(GLOBAL); 
073E:  MOVLW  C0
0740:  IORWF  FF2,F
....................    
....................   for(;;) 
....................    { 
....................       //lcd_backlight=ON; 
....................       for(i=1;i<6;i++) 
0742:  CLRF   x6C
0744:  MOVLW  01
0746:  MOVWF  x6B
0748:  MOVF   x6C,F
074A:  BNZ   0774
074C:  MOVF   x6B,W
074E:  SUBLW  05
0750:  BNC   0774
....................          printf("%d",RXBuffer[i]); 
0752:  MOVLW  44
0754:  ADDWF  x6B,W
0756:  MOVWF  FE9
0758:  MOVLW  00
075A:  ADDWFC x6C,W
075C:  MOVWF  FEA
075E:  MOVFF  FEF,6E
0762:  MOVFF  6E,6F
0766:  MOVLW  18
0768:  MOVWF  x70
076A:  RCALL  055E
076C:  INCF   x6B,F
076E:  BTFSC  FD8.2
0770:  INCF   x6C,F
0772:  BRA    0748
....................          printf("\n\r"); 
0774:  MOVLW  A4
0776:  MOVWF  FF6
0778:  MOVLW  01
077A:  MOVWF  FF7
077C:  RCALL  0610
....................       for(i=6;i<16;i++) 
077E:  CLRF   x6C
0780:  MOVLW  06
0782:  MOVWF  x6B
0784:  MOVF   x6C,F
0786:  BNZ   07DE
0788:  MOVF   x6B,W
078A:  SUBLW  0F
078C:  BNC   07DE
....................       if(i==9) printf("_%d",RXBuffer[i]); 
078E:  MOVF   x6B,W
0790:  SUBLW  09
0792:  BNZ   07BC
0794:  MOVF   x6C,F
0796:  BNZ   07BC
0798:  MOVLW  44
079A:  ADDWF  x6B,W
079C:  MOVWF  FE9
079E:  MOVLW  00
07A0:  ADDWFC x6C,W
07A2:  MOVWF  FEA
07A4:  MOVFF  FEF,6E
07A8:  MOVLW  5F
07AA:  BTFSS  F9E.4
07AC:  BRA    07AA
07AE:  MOVWF  FAD
07B0:  MOVFF  6E,6F
07B4:  MOVLW  18
07B6:  MOVWF  x70
07B8:  RCALL  055E
....................          else 
07BA:  BRA    07D6
....................          printf("%d",RXBuffer[i]); 
07BC:  MOVLW  44
07BE:  ADDWF  x6B,W
07C0:  MOVWF  FE9
07C2:  MOVLW  00
07C4:  ADDWFC x6C,W
07C6:  MOVWF  FEA
07C8:  MOVFF  FEF,6E
07CC:  MOVFF  6E,6F
07D0:  MOVLW  18
07D2:  MOVWF  x70
07D4:  RCALL  055E
07D6:  INCF   x6B,F
07D8:  BTFSC  FD8.2
07DA:  INCF   x6C,F
07DC:  BRA    0784
....................           
....................          printf("\n\r"); 
07DE:  MOVLW  A8
07E0:  MOVWF  FF6
07E2:  MOVLW  01
07E4:  MOVWF  FF7
07E6:  RCALL  0610
....................       /* 
....................       if(msgrdy) 
....................       { 
....................          lcd_backlight=ON; 
....................          IOpin.errorLED=1; 
....................          set_CHID(); 
....................          init_nrf24(); 
....................          for(i=0;i<100;i++) 
....................          { 
....................             IOpin.buzzer=0; 
....................             delay_us(500); 
....................             IOpin.buzzer=1; 
....................             delay_us(500); 
....................          } 
....................           
....................           lcd_putc('\f'); 
....................           lcd_gotoxy(1,1); 
....................           printf(lcd_putc,"ID:"); 
....................          for(i=0;i<16;i++) 
....................          { 
....................             lcd_gotoxy(1+i,2); 
....................             printf(lcd_putc,"%c",RFIDmsg[i]); 
....................          } 
....................          IOpin.errorLED=0; 
....................          delay_ms(1000); 
....................          lcd_gotoxy(1,2); 
....................          lcd_putc('\f'); 
....................            
....................                 
....................                for(i=6;i<16;i++) RFIDmsg[i]-=48;//nein 
....................                 
....................                TXBuffer[0]=0; 
....................                TXBuffer[1]=hr; 
....................                TXBuffer[2]=min; 
....................                TXBuffer[3]=dt; 
....................                TXBuffer[4]=mt; 
....................                TXBuffer[5]=yr; 
....................                TXBuffer[6]=RFIDmsg[0];// country code 
....................                TXBuffer[7]=RFIDmsg[1];// country code 
....................                TXBuffer[8]=RFIDmsg[2];// country code 
....................                 
....................                tmpbcd=RFIDmsg[4]<<4||RFIDmsg[5]; 
....................                TXBuffer[9]=tmpbcd;//ID 
....................                 
....................                tmpbcd=RFIDmsg[6]<<4||RFIDmsg[7]; 
....................                TXBuffer[10]=tmpbcd; 
....................                 
....................                tmpbcd=RFIDmsg[8]<<4||RFIDmsg[9]; 
....................                TXBuffer[11]=tmpbcd; 
....................                 
....................                tmpbcd=RFIDmsg[10]<<4||RFIDmsg[11]; 
....................                TXBuffer[12]=tmpbcd; 
....................                 
....................                tmpbcd=RFIDmsg[12]<<4||RFIDmsg[13]; 
....................                TXBuffer[13]=tmpbcd; 
....................                 
....................                tmpbcd=RFIDmsg[14]<<4||RFIDmsg[15]; 
....................                TXBuffer[14]=tmpbcd; 
....................                transmit_data(); 
....................                msgrdy=0; 
....................                 
....................                 
.................... }*/ 
....................                
....................                /* 
....................                if(s!=sec) 
....................                show_parameters(); 
....................                delay_ms(2000); 
....................                */ 
....................                lcd_backlight=OFF; 
07E8:  BCF    33.2
....................                //sleep(); 
....................           
....................    } 
07EA:  BRA    0742
....................     
.................... }    
07EC:  SLEEP 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 0C18   PUT NOBROWNOUT BORV21 NOWDT WDT64
   Word  3: 01C3   CCP2C1 NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NOXINST NODEBUG
   Word  5: 0000   PROTECT
   Word  6: 0000  
   Word  7: 0001  
